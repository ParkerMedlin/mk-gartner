The viewBox attribute
The SVG viewBox is a whole lot of magic rolled up in one little attribute. It’s the final piece that makes vector graphics Scalable Vector Graphics. The viewBox does many things:

It defines the aspect ratio of the image.
It defines how all the lengths and coordinates used inside the SVG should be scaled to fit the total space available.
It defines the origin of the SVG coordinate system, the point where x=0 and y=0.
The viewBox is an attribute of the <svg> element. Its value is a list of four numbers, separated by whitespace or commas: x, y, width, height. The width is the width in user coordinates/px units, within the SVG code, that should be scaled to fill the width of the area into which you’re drawing your SVG (the viewport in SVG lingo). Likewise, the height is the number of px/coordinates that should be scaled to fill the available height. Even if your SVG code uses other units, such as inches or centimeters, these will also be scaled to match the overall scale created by the viewBox.

The x and y numbers specify the coordinate, in the scaled viewBox coordinate system, to use for the top left corner of the SVG viewport. (Coordinates increase left-to-right and top-to-bottom, the same as for identifying page locations in JavaScript). For simple scaling, you can set both values to 0. However, the x and y values are useful for two purposes: to create a coordinate system with an origin centered in the drawing (this can make defining and transforming shapes easier), or to crop an image tighter than it was originally defined.

Some example viewBox values:

viewBox="0 0 100 100": Defines a coordinate system 100 units wide and 100 units high. In other words, if your SVG contains a circle centered in the graphic with radius of 50px, it would fill up the height or width of the SVG image, even if the image was displayed full screen. If your SVG contained a rectangle with height="1in", it would also nearly fill up the screen, because 1 inch = 96px in CSS, and all lengths will get scaled equally.
viewBox="5 0 90 100": Almost the same view, but cropped in by 5% on the left and right, so that the total width=90 units and the x-coordinate on the left=5.
viewBox="-50 -50 100 100": A view with the same scale, but now with the top-left corner given the coordinates (-50, -50). Which means that the bottom-rightcorner has the coordinates (+50, +50). Any shapes drawn at (100, 100) will be far offscreen. If you wanted to draw a circle that completely filled the image area, it would be centered at (0, 0).
Once you add a viewBox to your <svg> (and editors like Inkscape and Illustrator will add it by default), you can use that SVG file as an image, or as inline SVG code, and it will scale perfectly to fit within whatever size you give it. However, it still won’t scale quite like any other image. By default, it will not be stretched or distorted if you give it dimensions that don’t match the aspect ratio. Instead, the scale will be adjusted in order to preserve the aspect ratio defined in the code




animated_border:
in this video you're going to learn how
to create border animations in CSS and
the thing is to achieve this Behavior I
really had to write the weirdest CSS
code it uses very uncommon but pretty
cool CSS properties that you probably
never heard of my name is Fabian and
this is coding to go the channel where
you learn the most relevant coding
Concepts in just a few minutes and today
you will learn how to create these
border animations yourself to make
elements on your website stand out to
create an effect like this we cannot use
the Border property because it's just
not possible to add multiple fading
colors that move around the edge with a
glob effect on top of it instead like
always if something seems impossible we
have to go with a pseudo element on the
card that I want to animate I apply a
colon colon after element if youve seen
my tutorial on sud elements this part is
going to be a lot easier to understand
our after element has no content and
uses absolute positioning so we also
apply position relative on the card
itself to set the height and width of
the after element to
100% if we apply a red background color
we can our Pudo element which should be
the same size as the card itself now I
apply top and left 50% to Center the
element that will only Center the
element's origin which is the top left
corner so we need to translate it back
by 50% on the X and Y AIS this will push
it back by half its own size currently
this is covering the entire card so we
use a negative Z index to push it behind
the card and you probably guessed it
already this after element will now
serve as our border because any p ping
that we apply to this element will
basically control the thickness of the
border and since this is an entire
element and not just a border we can
apply all sorts of crazy CSS properties
to it for starters let's apply the same
border rges but instead of just using
the color red we can use the background
image to apply a conic
gradient to show you this better I will
put the element back in the foreground a
conic gradient is similar to a linear
gradient with the difference that it
goes clockwise it's basically like
looking at a cone from the top
perspective this gradient can receive
many different
colors as we can see the first and last
color have a pretty sharp cut in between
to smooth this out we can just repeat
the first color and then put it back at
the end then the line disappears and it
fades perfectly putting the element
behind our element reveals how this
could lead to our desired animation but
how can I get the glow effect to work
for that we have to duplicate this after
element by creating a before element
that looks exactly the same just use a
comma so that the style apply for both
the before and the after element now we
have two suit elements that are exactly
the same but for the before element I
will also apply filter blur to blur this
element by 1.5 RM and that will make it
Glow to improve this slightly we can
decrease the opacity with a value of 0.5
now the glowing is not too strong before
I show you how to animate these
gradients I also want to show you an
alternative which is this shining effect
where one or multiple colors move around
the edge for that we just have to use
different different colors I'm going to
use transparent and blue if you want to
control the length of the blue effect
then you can modify the size of the
transparent color by using percentages
like 50% transparent or 90% transparent
that will make the blue tail pretty
small and you can also have more
elements going around by just adding
more colors to the gradient now let's
see how we can animate this for that we
need to control the angle the angle is
the first parameter what we have to say
from
0° now turning this value up to 20°
50° 80° and so on we'll show you how
this animation would look later every
time I change this manually the Border
effect moves around and this is exactly
the value that we need to animate the
problem is it is not possible to animate
gradients if you ever try to transition
a button with a gradient on Hover then
you notice real quick that CSS doesn't
allow that but a workaround for that
would be to use custom properties also
known as CSS variables let's create a
variable D- angle 0° and the gradient we
can use the VAR function to assign this
variable as the angle that we want to
use D-
[Music]
Angle now we apply an animation 3
seconds we call it spin it should be
linear and play infinitely then I create
the spin animation using the add key
frames from this to that at the
beginning the angle variable will be at
0° and at the end it will be at 360°
which is just one full rotation so in
this key frames animation we are
constantly overwriting the angle
variable which is used up here to
control the angle of the conic radient
and this should make the animation work
but for some reason it's not working and
this is where really gets
complicated you see the problem is CSS
variables are normally not animatable
which means that animations won't be
applied to it but there is a new
experimental feature that can help us
out here I'm talking about the at
property rule which is a fancy way of
creating custom properties in CSS so
instead of using this variable here I
write add property-- angle here we have
to set up a few things first the syntax
is angle this controls the values this
variable can accept angle means it has
to be a number followed by degrees which
is just what we want if the syntax was
color for example then only colors like
RGB or hex are accepted next is the
initial value 0° that's just the default
value that we want to apply and inherits
is for
which is also just a default setting for
a custom property and now that we have
created the custom property that way it
will work perfectly and there you go our
border effect is animating perfectly if
you want a different effect just use
different colors this was coding to go
and if you learn something new today
subscribe to the channel and let me know
what video you want to see next you also
might want to check out this video right
here I will see you there